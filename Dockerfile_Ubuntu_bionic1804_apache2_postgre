FROM ubuntu:bionic-20200403

WORKDIR /

ENV LANG en_US.utf8
ENV bCIRT_HOSTNAME='bcirt'
ENV bCIRT_NTP='<server1> <server2>'

# default home for all the settings
ENV bCIRT_ROOT='/bCIRT/'
ENV bCIRT_WWW=${bCIRT_ROOT}var/www/html/
# cert home
ENV bCIRT_CERTS="${bCIRT_ROOT}/certs/"
# virtual environments
ENV bCIRT_VIRTUAL_ENV_HOME=${bCIRT_ROOT}venvs/
# virtual environment foldername for the django app
ENV bCIRT_VENV=django_venv
# virtual environment path for the django app
ENV bCIRT_VIRTUAL_ENV=${bCIRT_VIRTUAL_ENV_HOME}$bCIRT_VENV
# virtual environment for the actions pythonv2
ENV bCIRT_VENV_ACTIONS_v2=actions_v2
# virtual environment for the actions pythonv3
ENV bCIRT_VENV_ACTIONS_v3=actions_v3

# web root
ENV bCIRT_HOME='/bCIRT/var/www/html/bCIRT/'
ENV PATH="$bCIRT_VIRTUAL_ENV/bin:$PATH"

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
#PYTHONDONTWRITEBYTECODE: Prevents Python from writing pyc files to disc (equivalent to python -B option)
#PYTHONUNBUFFERED: Prevents Python from buffering stdout and stderr (equivalent to python -u option)

# set work directory
WORKDIR ${bCIRT_HOME}


# install dependencies
RUN apt-get update && apt-get install -yq --no-install-recommends \
    apt-utils \
    nano \
    unzip zip\
    ufw \
    wget \
    sudo \
    locales \
    openssl \
    netcat \
    python3 python3-magic python3-pip python3-venv python3-setuptools \
    gcc \
    python3-dev build-essential libssl-dev libffi-dev libxml2-dev libxslt1-dev zlib1g-dev \
    apache2 libapache2-mod-wsgi-py3 \
    && apt-get clean && rm -rf /var/lib/apt/lists/* \
#    && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
    && locale-gen en_US.UTF-8 en_GB.UTF-8

#set up NTP
#RUN sudo echo "NTP=$bCIRT_NTP" > /etc/systemd/timesyncd.conf && timedatectl set-ntp on && systemctl restart systemd-timesyncd && systemctl status systemd-timesyncd

# define hostname manually, hostnamectl is not installed
#RUN echo $bCIRT_HOSTNAME > /etc/hostname &&

# create django home virtual environment
RUN mkdir -p ${bCIRT_VIRTUAL_ENV_HOME}
WORKDIR ${bCIRT_VIRTUAL_ENV_HOME}
RUN python3 -m venv ${bCIRT_VENV} && . ${bCIRT_VIRTUAL_ENV}/bin/activate && ${bCIRT_VIRTUAL_ENV}/bin/pip3 install --upgrade pip wheel

# wget https://github.com/bl305/bCIRT/raw/master/bCIRT_PackageReleases/0113_bCIRT_v203_20200418.zip
COPY ./requirements_Ubuntu_bionic1804_apache2_postgre.txt ${bCIRT_HOME}/requirements.txt
#RUN source ${bCIRT_VIRTUAL_ENV}bin/activate && ${bCIRT_VIRTUAL_ENV}bin/pip3 install --no-cache-dir -r ${bCIRT_HOME}requirements.txt
RUN . ${bCIRT_VIRTUAL_ENV}/bin/activate && ${bCIRT_VIRTUAL_ENV}/bin/pip3 install --no-cache-dir -r ${bCIRT_HOME}requirements.txt
#RUN ${bCIRT_VIRTUAL_ENV}/bin/pip3 install --no-cache-dir -r ${bCIRT_HOME}/requirements.txt
COPY ./requirements_postgre.txt ${bCIRT_HOME}/requirements_postgre.txt
RUN . ${bCIRT_VIRTUAL_ENV}/bin/activate && ${bCIRT_VIRTUAL_ENV}/bin/pip3 install --no-cache-dir -r ${bCIRT_HOME}/requirements_postgre.txt

# create actions virtual environments v3
RUN python3 -m venv ${bCIRT_VENV_ACTIONS_v3} && . ${bCIRT_VIRTUAL_ENV_HOME}/${bCIRT_VENV_ACTIONS_v3}/bin/activate && ${bCIRT_VIRTUAL_ENV_HOME}/${bCIRT_VENV_ACTIONS_v3}/bin/pip3 install --upgrade pip wheel
# install dependencies
#RUN . ${bCIRT_VIRTUAL_ENV_HOME}/${bCIRT_VENV_ACTIONS_v3}/bin/activate && ${bCIRT_VIRTUAL_ENV_HOME}/${bCIRT_VENV_ACTIONS_v3}/bin/pip3 install --upgrade pip wheel

# # create actions virtual environments v2
#RUN apt-get update && apt-get install -yq --no-install-recommends \
#    python-virtualenv \
#    && apt-get clean && rm -rf /var/lib/apt/lists/*
#
#RUN virtualenv ${bCIRT_VIRTUAL_ENV_HOME}/${bCIRT_VENV_ACTIONS_v2}
#RUN . ${bCIRT_VIRTUAL_ENV_HOME}/${bCIRT_VENV_ACTIONS_v2}/bin/activate && ${bCIRT_VIRTUAL_ENV_HOME}/${bCIRT_VENV_ACTIONS_v2}/bin/pip install --upgrade pip wheel
# RUN mkdir -p ${bCIRT_VIRTUAL_ENV_HOME}
# #WORKDIR ${bCIRT_VIRTUAL_ENV_HOME}/${bCIRT_VENV_ACTIONS_v2}
# #RUN python2 -m venv ${bCIRT_VENV_ACTIONS_v2}
# install dependencies
#RUN virtualenv ${bCIRT_VIRTUAL_ENV_HOME}/${bCIRT_VENV_ACTIONS_v2} && . ${bCIRT_VIRTUAL_ENV_HOME}/${bCIRT_VENV_ACTIONS_v2}/bin/activate && ${bCIRT_VIRTUAL_ENV_HOME}/${bCIRT_VENV_ACTIONS_v2}/bin/pip install --upgrade pip wheel

COPY ./osbuilds/ubuntu/etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/default-ssl.conf
COPY ./osbuilds/ubuntu/etc/apache2/conf-available/ssl-params.conf /etc/apache2/conf-available/ssl-params.conf

WORKDIR ${bCIRT_ROOT}
RUN mkdir ${bCIRT_CERTS}
#RUN mkdir "${bCIRT_CERTS}private"
#RUN mkdir "${bCIRT_CERTS}client"
#RUN mkdir "${bCIRT_CERTS}server"
COPY ./osbuilds/certs/export ${bCIRT_CERTS}

RUN sudo a2enmod ssl \
    && sudo a2enmod headers \
    && sudo a2ensite default-ssl \
    && sudo a2enconf ssl-params \
    && sudo apache2ctl configtest \
    && a2dissite 000-default \
    && sudo service apache2 restart

## copy project
COPY . ${bCIRT_HOME}

WORKDIR ${bCIRT_HOME}
COPY ./bCIRT/settings_docker_Ubuntu_bionic1804_apache2_postgre.py ${bCIRT_HOME}/bCIRT/settings.py
COPY ./bCIRT/custom_variables_docker_Ubuntu_bionic1804_apache2_postgre.py ${bCIRT_HOME}/bCIRT/custom_variables.py
RUN chown -R www-data:www-data ${bCIRT_HOME}

## run entrypoint.sh
COPY ./docker_entrypoint_Ubuntu_bionic1804_apache2_postgre.sh ${bCIRT_HOME}/entrypoint.sh
RUN chmod +x ${bCIRT_HOME}/entrypoint.sh
ENTRYPOINT ["/bCIRT/var/www/html/bCIRT/entrypoint.sh"]
##CMD apachectl -D FOREGROUND